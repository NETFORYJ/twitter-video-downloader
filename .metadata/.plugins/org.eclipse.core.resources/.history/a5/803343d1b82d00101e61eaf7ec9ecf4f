package com.example.TwitterVideoDownloader.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.stereotype.Service;

import java.io.*;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.*;

@Service
public class VideoDownloadService {

    private String normalizeUrl(String url) {
        return url.replace("x.com", "twitter.com").trim();
    }

    private String getCookieFile(String videoUrl) {
        if (videoUrl.contains("twitter.com")) {
            return "cookies/twitter_cookies.txt";
        }
        return null;
    }

    public String fetchVideoDetails(String videoUrl) throws Exception {
        videoUrl = normalizeUrl(videoUrl);
        System.out.println("Fetching video details for: " + videoUrl);

        List<String> command = new ArrayList<>(Arrays.asList(
                "yt-dlp",
                "--skip-download",
                "--print-json",
                "--no-check-certificate",
                videoUrl
        ));

        String cookieFile = getCookieFile(videoUrl);
        if (cookieFile != null) {
            command.add("--cookies");
            command.add(cookieFile);
        }

        ProcessBuilder processBuilder = new ProcessBuilder(command);
        processBuilder.redirectErrorStream(true);
        Process process = processBuilder.start();

        StringBuilder output = new StringBuilder();
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
            String line;
            while ((line = reader.readLine()) != null) {
                output.append(line).append("\n");
            }
        }

        int exitCode = process.waitFor();
        if (exitCode != 0) {
            throw new RuntimeException("Failed to fetch video details.");
        }

        ObjectMapper objectMapper = new ObjectMapper();
        Map<String, Object> jsonResponse = objectMapper.readValue(output.toString(), Map.class);

        String thumbnailUrl = jsonResponse.getOrDefault("thumbnail", "").toString();
        String title = jsonResponse.getOrDefault("title", "Unknown Title").toString();

        Map<String, String> response = new HashMap<>();
        response.put("thumbnail", thumbnailUrl);
        response.put("title", title);
        return objectMapper.writeValueAsString(response);
    }

    public String downloadVideo(String videoUrl) throws Exception {
        videoUrl = normalizeUrl(videoUrl);
        System.out.println("Downloading video from: " + videoUrl);

        String uniqueFileName = UUID.randomUUID() + ".mp4";
        String filePath = "downloads/" + uniqueFileName;

        File downloadDir = new File("downloads");
        if (!downloadDir.exists() && !downloadDir.mkdirs()) {
            throw new RuntimeException("Failed to create downloads directory");
        }

        List<String> command = new ArrayList<>(Arrays.asList(
                "yt-dlp",
                "--user-agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64)",
                "-f", "best",
                "--no-check-certificate",
                "-o", filePath,
                videoUrl
        ));

        String cookieFile = getCookieFile(videoUrl);
        if (cookieFile != null && new File(cookieFile).exists()) {
            command.add("--cookies");
            command.add(cookieFile);
        }

        System.out.println("yt-dlp Command: " + String.join(" ", command));

        ProcessBuilder processBuilder = new ProcessBuilder(command);
        processBuilder.redirectErrorStream(true);
        Process process = processBuilder.start();

        try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
            reader.lines().forEach(System.out::println);
        }

        int exitCode = process.waitFor();
        if (exitCode != 0) {
            throw new RuntimeException("yt-dlp exited with code: " + exitCode);
        }

        File downloadedFile = new File(filePath);
        if (!downloadedFile.exists()) {
            throw new RuntimeException("Downloaded file not found: " + filePath);
        }

        return uniqueFileName;
    }

    public String getThumbnail(String videoUrl) throws Exception {
        videoUrl = normalizeUrl(videoUrl);
        System.out.println("Fetching thumbnail for: " + videoUrl);

        String uniqueFileName = null;
		List<String> command = Arrays.asList(
        	    "yt-dlp",
        	    "--user-agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64)",
        	    "-f", "best",
        	    "--write-thumbnail",
        	    "--no-check-certificate",
        	    "-o", "downloads/" + uniqueFileName + ".%(ext)s",
        	    videoUrl
        	);


        String cookieFile = getCookieFile(videoUrl);
        if (cookieFile != null && new File(cookieFile).exists()) {
            command.add("--cookies");
            command.add(cookieFile);
        }

        ProcessBuilder processBuilder = new ProcessBuilder(command);
        processBuilder.redirectErrorStream(true);
        Process process = processBuilder.start();

        String jsonLine = null;
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
            String line;
            while ((line = reader.readLine()) != null) {
                if (line.trim().startsWith("{") && line.trim().endsWith("}")) {
                    jsonLine = line;
                    break;
                }
            }
        }

        int exitCode = process.waitFor();
        if (exitCode != 0 || jsonLine == null) {
            throw new RuntimeException("Failed to fetch valid JSON thumbnail info.");
        }

        ObjectMapper objectMapper = new ObjectMapper();
        Map<String, Object> jsonResponse = objectMapper.readValue(jsonLine, Map.class);
        String thumbnailUrl = jsonResponse.getOrDefault("thumbnail", "").toString();

        if (thumbnailUrl.isEmpty()) {
            return "https://via.placeholder.com/350x200?text=No+Thumbnail";
        }

        // Save thumbnail
        String filename = UUID.randomUUID() + ".jpg";
        String outputPath = "downloads/" + filename;
        saveThumbnail(thumbnailUrl, outputPath);

        return "/downloads/" + filename;
    }

    private void saveThumbnail(String thumbnailUrl, String outputPath) throws IOException {
        URL url = new URL(thumbnailUrl);
        try (InputStream in = url.openStream()) {
            Files.copy(in, Paths.get(outputPath), StandardCopyOption.REPLACE_EXISTING);
        }
    }
}
