package com.example.TwitterVideoDownloader.controller;

import com.example.TwitterVideoDownloader.service.VideoDownloadService;
import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.http.ResponseEntity.BodyBuilder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping({"/api"})
public class VideoController {
   @Autowired
   private VideoDownloadService videoDownloadService;
   private static final Logger logger = Logger.getLogger(VideoController.class.getName());

   @PostMapping({"/fetch-details"})
   public ResponseEntity<String> fetchVideoDetails(@RequestParam String videoUrl) {
      try {
         logger.info("Fetching video details for: " + videoUrl);
         String jsonResponse = this.videoDownloadService.fetchVideoDetails(videoUrl);
         return ResponseEntity.ok(jsonResponse);
      } catch (Exception var3) {
         logger.log(Level.SEVERE, "Error fetching video details: " + var3.getMessage(), var3);
         return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("{\"error\": \"Error fetching video details.\"}");
      }
   }

   @PostMapping("/download")
   public ResponseEntity<Resource> downloadVideo(@RequestParam String videoUrl) {
       // ✅ Allow only Twitter/X video URLs
       if (!videoUrl.matches("^(https?://)?(www\\.)?(twitter\\.com|x\\.com)/[a-zA-Z0-9_]+/status/\\d+(\\?.*)?$")) {
           logger.warning("Blocked non-Twitter URL: " + videoUrl);
           return ResponseEntity
                   .status(HttpStatus.BAD_REQUEST)
                   .body(null); // You can customize the message if needed
       }

       try {
           logger.info("Downloading video from: " + videoUrl);

           // Ensure that the videoDownloadService is returning the correct file name
           String filename = this.videoDownloadService.downloadVideo(videoUrl);
           logger.info("Downloaded file path: " + filename);

           // Ensure the file path is correct (combine with absolute path if necessary)
           Path path = Paths.get("downloads", filename);
           logger.info("Absolute path to downloaded file: " + path.toAbsolutePath());

           File file = path.toFile();

           // Check file existence and readability
           logger.info("File exists: " + file.exists() + " | Can Read: " + file.canRead());

           if (file.exists() && file.canRead()) {
               Resource fileResource = new UrlResource(path.toUri());
               if (fileResource.exists() && fileResource.isReadable()) {
                   return ResponseEntity.ok()
                           .contentType(MediaType.APPLICATION_OCTET_STREAM)
                           .header("Content-Disposition", "attachment; filename=\"" + file.getName() + "\"")
                           .body(fileResource);
               } else {
                   logger.severe("Failed to read video file");
                   throw new RuntimeException("Failed to read video file");
               }
           } else {
               logger.severe("File does not exist or cannot be read: " + filename);
               return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
           }
       } catch (Exception e) {
           logger.log(Level.SEVERE, "Error downloading video: " + e.getMessage(), e);
           return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
       }
   }

  /* @PostMapping("/download")
   public ResponseEntity<Resource> downloadVideo(@RequestParam String videoUrl) {
       // ✅ Allow only Twitter/X video URLs
	   if (!videoUrl.matches("^(https?://)?(www\\.)?(twitter\\.com|x\\.com)/[a-zA-Z0-9_]+/status/\\d+(\\?.*)?$")) {
		    logger.warning("Blocked non-Twitter URL: " + videoUrl);
		    return ResponseEntity
		            .status(HttpStatus.BAD_REQUEST)
		            .body(null); // You can customize the message if needed
		}



       try {
           logger.info("Downloading video from: " + videoUrl);
         //  String filePath = this.videoDownloadService.downloadVideo(videoUrl);
           
            String filename = this.videoDownloadService.downloadVideo(videoUrl);

        
           logger.info("Downloaded file path: " + filename);

           Path path = Paths.get("downloads", filename);
         //  Path path = Paths.get(filePath);
           
           File file = path.toFile();

           if (file.exists() && file.canRead()) {
               Resource fileResource = new UrlResource(path.toUri());
               if (fileResource.exists() && fileResource.isReadable()) {
                   return ResponseEntity.ok()
                           .contentType(MediaType.APPLICATION_OCTET_STREAM)
                           .header("Content-Disposition", "attachment; filename=\"" + file.getName() + "\"")
                           .body(fileResource);
               } else {
                   throw new RuntimeException("Failed to read video file");
               }
           } else {
               logger.severe("File does not exist or cannot be read: " + filename);
               return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
           }
       } catch (Exception e) {
           logger.log(Level.SEVERE, "Error downloading video: " + e.getMessage(), e);
           return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
       }
   } */
   
   // all video downloading from soial media 
   /*@PostMapping({"/download"})
   public ResponseEntity<Resource> downloadVideo(@RequestParam String videoUrl) {
      try {
         logger.info("Downloading video from: " + videoUrl);
         String filePath = this.videoDownloadService.downloadVideo(videoUrl);
         logger.info("Downloaded file path: " + filePath);
         Path path = Paths.get("downloads", filePath);
         File file = path.toFile();
         if (file.exists() && file.canRead()) {
            Resource fileResource = new UrlResource(path.toUri());
            if (fileResource.exists() && fileResource.isReadable()) {
               return ResponseEntity.ok()
                  .contentType(MediaType.APPLICATION_OCTET_STREAM)
                  .header("Content-Disposition", "attachment; filename=\"" + file.getName() + "\"")
                  .body(fileResource);
            } else {
               throw new RuntimeException("Failed to read video file");
            }
         } else {
            logger.severe("File does not exist or cannot be read: " + filePath);
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null); // fixed
         }
      } catch (Exception e) {
         logger.log(Level.SEVERE, "Error downloading video: " + e.getMessage(), e);
         return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null); // fixed
      }
   }
*/

   @GetMapping("/thumbnail")
   public ResponseEntity<Map<String, String>> getVideoThumbnail(@RequestParam String videoUrl) {
       HashMap<String, String> response = new HashMap<>();
       try {
           logger.info("Fetching thumbnail for: " + videoUrl);
           
           // Use yt-dlp to get the thumbnail URL
           ProcessBuilder processBuilder = new ProcessBuilder(
               "yt-dlp",
               "--get-thumbnail",
               "--no-check-certificate",
               videoUrl
           );
           
           Process process = processBuilder.start();
           String thumbnailUrl = new BufferedReader(new InputStreamReader(process.getInputStream()))
               .lines().collect(Collectors.joining("\n")).trim();
           
           int exitCode = process.waitFor();
           
           if (exitCode == 0 && !thumbnailUrl.isEmpty()) {
               // Sometimes Twitter returns relative URLs, so we need to handle that
               if (thumbnailUrl.startsWith("http")) {
                   response.put("thumbnail", thumbnailUrl);
               } else {
                   response.put("thumbnail", "https://" + thumbnailUrl);
               }
               return ResponseEntity.ok(response);
           } else {
               throw new Exception("Could not extract thumbnail");
           }
       } catch (Exception e) {
           logger.log(Level.SEVERE, "Error fetching thumbnail: " + e.getMessage(), e);
           response.put("error", "Error fetching thumbnail");
           return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
       }
   

   }
}